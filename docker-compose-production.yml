services:
  backend:
    container_name: backend
    image: backend
    build:
      context: .
      dockerfile: docker/production.Dockerfile
    command: >
      sh -c "python manage.py makemigrations --no-input &&
      python manage.py migrate --no-input &&
      python manage.py collectstatic --no-input &&
      gunicorn config.wsgi --bind 0.0.0.0:8000"
    volumes:
      - ./:/app
      - static:/app/static
      - media:/app/media
    expose:
      - "8000"
    env_file:
      - envs/production/.env.backend
    depends_on:
      - database
      - redis
    networks:
      - main
    restart: always

  database:
    container_name: database
    image: postgres:16.0
    expose:
      - "5432"
    env_file:
      - envs/production/.env.db
    volumes:
      - database:/var/lib/postgresql/data
    networks:
      - main
    restart: always

  redis:
    container_name: redis
    image: redis:7.2.4
    expose:
      - "6379"
    command: sh -c "redis-server --save 60 1 --loglevel warning"
    networks:
      - main
    restart: always

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:management
    expose:
      - "5672"
    networks:
      - main
    restart: always

  worker:
    container_name: worker
    image: worker
    build:
      context: .
      dockerfile: docker/production.Dockerfile
    command: sh -c "celery -A config worker -l INFO"
    volumes:
      - ./:/app
    env_file:
      - envs/production/.env.backend
    depends_on:
      - rabbitmq
      - backend
    networks:
      - main
    restart: always

  worker_beat:
    container_name: worker_beat
    image: worker_beat
    build:
      context: .
      dockerfile: docker/production.Dockerfile
    command: sh -c "celery -A config beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    volumes:
      - ./:/app
    env_file:
      - envs/production/.env.backend
    depends_on:
      - rabbitmq
      - backend
    networks:
      - main
    restart: always

  nginx:
    container_name: nginx
    image: nginx:bookworm-perl
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static:/app/static
      - media:/app/media
    ports:
      - "80:80"
    networks:
      - main
    restart: always

  frontend:
    container_name: frontend
    image: frontend
    build:
      context: frontend/
      dockerfile: Dockerfile
    networks:
      - main
    restart: always

volumes:
  static:
    name: static
  media:
    name: media
  database:
    name: database

networks:
  main:
    name: main
